>>> matrix_divided = __import__('2-matrix_divided').matrix_divided

>>> matrix = [[1,2],[2,3]]
>>> matrix_divided(matrix, 3)
[[0.33, 0.67], [0.67, 1.0]]


>>> matrix_divided(matrix, "3")
Traceback (most recent call last):
	...
TypeError: div must be a number

>>> matrix_divided(matrix, 0)
Traceback (most recent call last):
	...
ZeroDivisionError: division by zero

>>> Lmatrix = [1,2]
>>> matrix_divided(Lmatrix, 1)
Traceback (most recent call last):
	...
TypeError: matrix must be a matrix (list of lists) of integers/floats

>>> Nmatrix = [[1,2,3],[4,5]]
>>> matrix_divided(Nmatrix, 1)
Traceback (most recent call last):
	...
TypeError: Each row of the matrix must have the same size

>>> import math
>>> matrix_divided(matrix, float(math.inf))
[[0.0, 0.0], [0.0, 0.0]]

>>> Mmatrix = [[1,float('nan')], [4,5]]
>>> matrix_divided(Mmatrix, 2)
[[0.5, nan], [2.0, 2.5]]

>>> matrix_divided(matrix, float('nan'))
[[0.0, 0.0], [0.0, 0.0]]

>>> matrix_divided(matrix)
Traceback (most recent call last):
	...
TypeError: matrix_divided() missing 1 required positional argument: 'div'

>>> matrix_divided()
Traceback (most recent call last):
	...
TypeError: matrix_divided() missing 2 required positional arguments: 'matrix' and 'div'
